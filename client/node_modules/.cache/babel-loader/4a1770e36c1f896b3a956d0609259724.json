{"ast":null,"code":"import _defineProperty from \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jatobrun/Documents/Developer/proyectos/capstone/client/src/components/Posts.tsx\";\nimport dateFormat from 'dateformat';\nimport update from 'immutability-helper';\nimport * as React from 'react';\nimport { Button, Checkbox, Divider, Grid, Header, Icon, Input, Image, Loader } from 'semantic-ui-react';\nimport { createPost, deletePost, getPosts, patchPost } from '../api/post-api';\nexport var Posts =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(Posts, _React$PureComponent);\n\n  function Posts() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Posts);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Posts)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      Posts: [],\n      newPostName: '',\n      loadingPosts: true\n    };\n\n    _this.handleNameChange = function (event) {\n      _this.setState({\n        newPostName: event.target.value\n      });\n    };\n\n    _this.onEditButtonClick = function (PostId) {\n      _this.props.history.push(\"/Posts/\".concat(PostId, \"/edit\"));\n    };\n\n    _this.onPostCreate =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var dueDate, newPost;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                dueDate = _this.calculateDueDate();\n                _context.next = 4;\n                return createPost(_this.props.auth.getIdToken(), {\n                  name: _this.state.newPostName,\n                  dueDate: dueDate\n                });\n\n              case 4:\n                newPost = _context.sent;\n\n                _this.setState({\n                  Posts: [].concat(_toConsumableArray(_this.state.Posts), [newPost]),\n                  newPostName: ''\n                });\n\n                _context.next = 11;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                alert('Post creation failed');\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.onPostDelete =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(PostId) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return deletePost(_this.props.auth.getIdToken(), PostId);\n\n              case 3:\n                _this.setState({\n                  Posts: _this.state.Posts.filter(function (Post) {\n                    return Post.postId != PostId;\n                  })\n                });\n\n                _context2.next = 9;\n                break;\n\n              case 6:\n                _context2.prev = 6;\n                _context2.t0 = _context2[\"catch\"](0);\n                alert('Post deletion failed');\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 6]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.onPostCheck =\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(pos) {\n        var Post;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                Post = _this.state.Posts[pos];\n                _context3.next = 4;\n                return patchPost(_this.props.auth.getIdToken(), Post.postId, {\n                  name: Post.name,\n                  dueDate: Post.dueDate,\n                  done: !Post.done\n                });\n\n              case 4:\n                _this.setState({\n                  Posts: update(_this.state.Posts, _defineProperty({}, pos, {\n                    done: {\n                      $set: !Post.done\n                    }\n                  }))\n                });\n\n                _context3.next = 10;\n                break;\n\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                alert('Post deletion failed');\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 7]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Posts, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _Posts;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return getPosts(this.props.auth.getIdToken());\n\n              case 3:\n                _Posts = _context4.sent;\n                this.setState({\n                  Posts: _Posts,\n                  loadingPosts: false\n                });\n                _context4.next = 10;\n                break;\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                alert(\"Failed to fetch Posts: \".concat(_context4.t0.message));\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Posts\"), this.renderCreatePostInput(), this.renderPosts());\n    }\n  }, {\n    key: \"renderCreatePostInput\",\n    value: function renderCreatePostInput() {\n      return React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        width: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Input, {\n        action: {\n          color: 'teal',\n          labelPosition: 'left',\n          icon: 'add',\n          content: 'New task',\n          onClick: this.onPostCreate\n        },\n        fluid: true,\n        actionPosition: \"left\",\n        placeholder: \"To change the world...\",\n        onChange: this.handleNameChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), React.createElement(Grid.Column, {\n        width: 16,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"renderPosts\",\n    value: function renderPosts() {\n      if (this.state.loadingPosts) {\n        return this.renderLoading();\n      }\n\n      return this.renderPostsList();\n    }\n  }, {\n    key: \"renderLoading\",\n    value: function renderLoading() {\n      return React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        indeterminate: true,\n        active: true,\n        inline: \"centered\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Loading Posts\"));\n    }\n  }, {\n    key: \"renderPostsList\",\n    value: function renderPostsList() {\n      var _this2 = this;\n\n      return React.createElement(Grid, {\n        padded: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, this.state.Posts.map(function (Post, pos) {\n        return React.createElement(Grid.Row, {\n          key: Post.postId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(Grid.Column, {\n          width: 1,\n          verticalAlign: \"middle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          onChange: function onChange() {\n            return _this2.onPostCheck(pos);\n          },\n          checked: Post.done,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        })), React.createElement(Grid.Column, {\n          width: 10,\n          verticalAlign: \"middle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, Post.name), React.createElement(Grid.Column, {\n          width: 3,\n          floated: \"right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }, Post.dueDate), React.createElement(Grid.Column, {\n          width: 1,\n          floated: \"right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(Button, {\n          icon: true,\n          color: \"blue\",\n          onClick: function onClick() {\n            return _this2.onEditButtonClick(Post.postId);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          name: \"pencil\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }))), React.createElement(Grid.Column, {\n          width: 1,\n          floated: \"right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, React.createElement(Button, {\n          icon: true,\n          color: \"red\",\n          onClick: function onClick() {\n            return _this2.onPostDelete(Post.postId);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          name: \"delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 192\n          },\n          __self: this\n        }))), Post.attachmentUrl && React.createElement(Image, {\n          src: Post.attachmentUrl,\n          size: \"small\",\n          wrapped: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196\n          },\n          __self: this\n        }), React.createElement(Grid.Column, {\n          width: 16,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, React.createElement(Divider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        })));\n      }));\n    }\n  }, {\n    key: \"calculateDueDate\",\n    value: function calculateDueDate() {\n      var date = new Date();\n      date.setDate(date.getDate() + 7);\n      return dateFormat(date, 'yyyy-mm-dd');\n    }\n  }]);\n\n  return Posts;\n}(React.PureComponent);","map":{"version":3,"sources":["/home/jatobrun/Documents/Developer/proyectos/capstone/client/src/components/Posts.tsx"],"names":["dateFormat","update","React","Button","Checkbox","Divider","Grid","Header","Icon","Input","Image","Loader","createPost","deletePost","getPosts","patchPost","Posts","state","newPostName","loadingPosts","handleNameChange","event","setState","target","value","onEditButtonClick","PostId","props","history","push","onPostCreate","dueDate","calculateDueDate","auth","getIdToken","name","newPost","alert","onPostDelete","filter","Post","postId","onPostCheck","pos","done","$set","message","renderCreatePostInput","renderPosts","color","labelPosition","icon","content","onClick","renderLoading","renderPostsList","map","attachmentUrl","date","Date","setDate","getDate","PureComponent"],"mappings":"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","sourcesContent":["import dateFormat from 'dateformat'\nimport { History } from 'history'\nimport update from 'immutability-helper'\nimport * as React from 'react'\nimport {\n  Button,\n  Checkbox,\n  Divider,\n  Grid,\n  Header,\n  Icon,\n  Input,\n  Image,\n  Loader\n} from 'semantic-ui-react'\n\nimport { createPost, deletePost, getPosts, patchPost } from '../api/post-api'\nimport Auth from '../auth/Auth'\nimport { Post } from '../types/Post'\n\ninterface PostsProps {\n  auth: Auth\n  history: History\n}\n\ninterface PostsState {\n  Posts: Post[]\n  newPostName: string\n  loadingPosts: boolean\n}\n\nexport class Posts extends React.PureComponent<PostsProps, PostsState> {\n  state: PostsState = {\n    Posts: [],\n    newPostName: '',\n    loadingPosts: true\n  }\n\n  handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ newPostName: event.target.value })\n  }\n\n  onEditButtonClick = (PostId: string) => {\n    this.props.history.push(`/Posts/${PostId}/edit`)\n  }\n\n  onPostCreate = async (event: React.ChangeEvent<HTMLButtonElement>) => {\n    try {\n      const dueDate = this.calculateDueDate()\n      const newPost = await createPost(this.props.auth.getIdToken(), {\n        name: this.state.newPostName,\n        dueDate\n      })\n      this.setState({\n        Posts: [...this.state.Posts, newPost],\n        newPostName: ''\n      })\n    } catch {\n      alert('Post creation failed')\n    }\n  }\n\n  onPostDelete = async (PostId: string) => {\n    try {\n      await deletePost(this.props.auth.getIdToken(), PostId)\n      this.setState({\n        Posts: this.state.Posts.filter(Post => Post.postId != PostId)\n      })\n    } catch {\n      alert('Post deletion failed')\n    }\n  }\n\n  onPostCheck = async (pos: number) => {\n    try {\n      const Post = this.state.Posts[pos]\n      await patchPost(this.props.auth.getIdToken(), Post.postId, {\n        name: Post.name,\n        dueDate: Post.dueDate,\n        done: !Post.done\n      })\n      this.setState({\n        Posts: update(this.state.Posts, {\n          [pos]: { done: { $set: !Post.done } }\n        })\n      })\n    } catch {\n      alert('Post deletion failed')\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      const Posts = await getPosts(this.props.auth.getIdToken())\n      this.setState({\n        Posts,\n        loadingPosts: false\n      })\n    } catch (e) {\n      alert(`Failed to fetch Posts: ${e.message}`)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header as=\"h1\">Posts</Header>\n\n        {this.renderCreatePostInput()}\n\n        {this.renderPosts()}\n      </div>\n    )\n  }\n\n  renderCreatePostInput() {\n    return (\n      <Grid.Row>\n        <Grid.Column width={16}>\n          <Input\n            action={{\n              color: 'teal',\n              labelPosition: 'left',\n              icon: 'add',\n              content: 'New task',\n              onClick: this.onPostCreate\n            }}\n            fluid\n            actionPosition=\"left\"\n            placeholder=\"To change the world...\"\n            onChange={this.handleNameChange}\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Divider />\n        </Grid.Column>\n      </Grid.Row>\n    )\n  }\n\n  renderPosts() {\n    if (this.state.loadingPosts) {\n      return this.renderLoading()\n    }\n\n    return this.renderPostsList()\n  }\n\n  renderLoading() {\n    return (\n      <Grid.Row>\n        <Loader indeterminate active inline=\"centered\">\n          Loading Posts\n        </Loader>\n      </Grid.Row>\n    )\n  }\n\n  renderPostsList() {\n    return (\n      <Grid padded>\n        {this.state.Posts.map((Post, pos) => {\n          return (\n            <Grid.Row key={Post.postId}>\n              <Grid.Column width={1} verticalAlign=\"middle\">\n                <Checkbox\n                  onChange={() => this.onPostCheck(pos)}\n                  checked={Post.done}\n                />\n              </Grid.Column>\n              <Grid.Column width={10} verticalAlign=\"middle\">\n                {Post.name}\n              </Grid.Column>\n              <Grid.Column width={3} floated=\"right\">\n                {Post.dueDate}\n              </Grid.Column>\n              <Grid.Column width={1} floated=\"right\">\n                <Button\n                  icon\n                  color=\"blue\"\n                  onClick={() => this.onEditButtonClick(Post.postId)}\n                >\n                  <Icon name=\"pencil\" />\n                </Button>\n              </Grid.Column>\n              <Grid.Column width={1} floated=\"right\">\n                <Button\n                  icon\n                  color=\"red\"\n                  onClick={() => this.onPostDelete(Post.postId)}\n                >\n                  <Icon name=\"delete\" />\n                </Button>\n              </Grid.Column>\n              {Post.attachmentUrl && (\n                <Image src={Post.attachmentUrl} size=\"small\" wrapped />\n              )}\n              <Grid.Column width={16}>\n                <Divider />\n              </Grid.Column>\n            </Grid.Row>\n          )\n        })}\n      </Grid>\n    )\n  }\n\n  calculateDueDate(): string {\n    const date = new Date()\n    date.setDate(date.getDate() + 7)\n\n    return dateFormat(date, 'yyyy-mm-dd') as string\n  }\n}\n"]},"metadata":{},"sourceType":"module"}